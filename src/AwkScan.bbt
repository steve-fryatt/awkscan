REM >!AwkScan
REM
REM Copyright 2002-2014, Stephen Fryatt (info@stevefryatt.org.uk)
REM
REM This file is part of Float:
REM
REM   http://www.stevefryatt.org.uk/software/
REM
REM Licensed under the EUPL, Version 1.1 only (the "Licence");
REM You may not use this work except in compliance with the
REM Licence.
REM
REM You may obtain a copy of the Licence at:
REM
REM   http://joinup.ec.europa.eu/software/page/eupl
REM
REM Unless required by applicable law or agreed to in
REM writing, software distributed under the Licence is
REM distributed on an "AS IS" basis, WITHOUT WARRANTIES
REM OR CONDITIONS OF ANY KIND, either express or implied.
REM
REM See the Licence for the specific language governing
REM permissions and limitations under the Licence.
:
ON ERROR VDU 4 : PRINT "Error in AwkScan: ";REPORT$;" at line ";ERL : END
:
LIBRARY "BASIC:WimpLib"
LIBRARY "BASIC:Window"
LIBRARY "BASIC:Config"
LIBRARY "BASIC:WimpError"
:
REM These values get replaced by tokenize.
:
build_version$ = "1.06"
build_date$ = "14 Dec 2003"
:
PROCinitialise
:
PROCwimp_error_initialise(task_name$,task_spr$)
:
ON ERROR IF FNwimp_error=2 THEN quit%=TRUE
:
WHILE NOT quit%
 PROCpoll
ENDWHILE
:
SYS "Wimp_CloseDown"
:
END
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
REM Wimp event handlers
:
:
:
:
DEF PROCpoll
SYS "Wimp_Poll",1,b% TO reason_code%
:
CASE reason_code% OF
 WHEN 2     : SYS "Wimp_OpenWindow",,b%
 WHEN 3     : SYS "Wimp_CloseWindow",,b%
 WHEN 6     : PROChandle_mouse_click_event
 WHEN 8     : PROChandle_keypress_event
 WHEN 9     : PROChandle_menu_selection_event
 WHEN 17,18 : PROCreceive_wimp_message
ENDCASE
ENDPROC
:
:
:
:
DEF PROChandle_mouse_click_event
CASE b%!12 OF
 WHEN -2
  CASE b%!8 OF
   WHEN 4 : PROCopen_search_window(FNread_opt_config("Select opens blank"),!b%,b%!4)
   WHEN 2 : PROCdisplay_bar_menu(icon_bar_menu%,5,2,!b%)
   WHEN 1 : PROCopen_search_window(NOT FNread_opt_config("Select opens blank"),!b%,b%!4)
  ENDCASE
 WHEN search_window%
  CASE b%!16 OF
   WHEN 0 : IF b%!8=4 THEN PROCclose_window(search_window%)
   WHEN 1 : PROCsearch_with_parameters : IF b%!8=4 THEN PROCclose_window(search_window%)
   WHEN 3 : PROCdisplay_icon_menu(logic_menu%,search_window%,3)
  ENDCASE
 WHEN options_window%
  CASE b%!16 OF
   WHEN 0 : IF b%!8=4 THEN PROCclose_window(options_window%) ELSE PROCopen_options_window(0,0,FALSE)
   WHEN 1 : PROCset_options : IF b%!8=4 THEN PROCclose_window(options_window%)
   WHEN 2 : PROCset_options : PROCsave_options : IF b%!8=4 THEN PROCclose_window(options_window%)
  ENDCASE
ENDCASE
ENDPROC
:
:
:
:
DEF PROChandle_keypress_event
CASE !b% OF
 WHEN search_window%
  CASE b%!24 OF
   WHEN 13 : PROCsearch_with_parameters : PROCclose_window(search_window%)
   WHEN 27 : PROCclose_window(search_window%)
  ENDCASE
 WHEN options_window%
  CASE b%!24 OF
   WHEN 13 : PROCset_options : PROCclose_window(options_window%)
   WHEN 27 : PROCclose_window(options_window%)
  ENDCASE
ENDCASE
ENDPROC
:
:
:
:
DEF PROChandle_menu_selection_event
:
LOCAL re_open%
:
SYS "Wimp_GetPointerInfo",,q%
re_open%=(q%!8=1)
:
CASE menu_up% OF
 WHEN icon_bar_menu%
  CASE !b% OF
   WHEN 1 : OSCLI("%Filer_Run <AwkScan$Dir>.!Help")
   WHEN 2
    CASE b%!4 OF
     WHEN 0 : OSCLI("%Filer_OpenDir <AwkScan$Discs>") : OSCLI("%Filer_OpenDir <AwkScan$Mag>")
     WHEN 1 : OSCLI("%Filer_Run <AwkScan$CodeDir>.Init")
    ENDCASE
   WHEN 3 : PROCopen_options_window(!q%,q%!4,TRUE)
   WHEN 4 : quit%=TRUE
  ENDCASE
 WHEN logic_menu%
  search_logic%=!b%
  $FNicon_indirection(search_window%,4)=FNget_standard_menu_text(logic_menu%,search_logic%)
  PROCforce_icon_redraw(search_window%,4)
ENDCASE
:
IF re_open% THEN PROCdisplay_menu(menu_up%,0,0)
ENDPROC
:
:
:
:
DEF PROCreceive_wimp_message
CASE b%!16 OF
 WHEN 0    : quit%=TRUE
 WHEN 3    : PROCsearch_with_file
 WHEN &502 : PROCsend_interactive_help
ENDCASE
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
REM Search parameter handling
:
:
:
:
DEF PROCopen_search_window(blank%,x%,y%)
IF NOT FNwindow_is_open(search_window%) THEN
 IF blank% THEN
  $FNicon_indirection(search_window%,2)=""
  $FNicon_indirection(search_window%,5)=""
  search_logic%=0
 ELSE
  $FNicon_indirection(search_window%,2)=last_search$(0)
  $FNicon_indirection(search_window%,5)=last_search$(1)
 ENDIF
 $FNicon_indirection(search_window%,4)=FNget_standard_menu_text(logic_menu%,search_logic%)
 PROCopen_window_centred(search_window%,x%,y%)
 PROCput_caret_at_end(search_window%,2)
ENDIF
ENDPROC
:
:
:
:
DEF PROCsearch_with_file
:
LOCAL file_name$
:
IF b%!40=&FFF THEN
 file_name$=FNzero_string(b%+44)
 :
 PROCcall_awkscan(file_name$)
 :
 b%!12=b%!8
 SYS "Wimp_SendMessage",17,b%,b%!4
ENDIF
ENDPROC
:
:
:
:
DEF PROCsearch_with_parameters
:
LOCAL file%
:
last_search$(0)=$FNicon_indirection(search_window%,2)
last_search$(1)=$FNicon_indirection(search_window%,5)
:
file%=OPENOUT("<AwkScan$ParamFile>")
:
IF file%=0 THEN
 PROCwimp_report(FNmessage_trans("PipeBroken"),2,%10,"")
ELSE
 BPUT#file%,"# AwkScan search file"
 BPUT#file%,"# Generated by AwkScanFE"
 BPUT#file%,""
 :
 IF FNicon_selected(search_window%,6) THEN
  BPUT#file%,"# case"
  BPUT#file%,""
 ENDIF
 :
 IF $FNicon_indirection(search_window%,5)="" THEN
  PROCwrite_string_to_file(file%,"[^A-Za-z]")
  PROCwrite_escaped_string_to_file(file%,$FNicon_indirection(search_window%,2))
  PROCwrite_string_to_file(file%,"[^A-Za-z]")
 ELSE
  PROCwrite_string_to_file(file%,"([^A-Za-z]")
  PROCwrite_escaped_string_to_file(file%,$FNicon_indirection(search_window%,2))
  PROCwrite_string_to_file(file%,"[^A-Za-z])")
  CASE search_logic% OF
   WHEN 0 : PROCwrite_string_to_file(file%,"&&")
   WHEN 1 : PROCwrite_string_to_file(file%,"|")
   WHEN 2 :
  ENDCASE
  PROCwrite_string_to_file(file%,"([^A-Za-z]")
  PROCwrite_escaped_string_to_file(file%,$FNicon_indirection(search_window%,5))
  PROCwrite_string_to_file(file%,"[^A-Za-z])")
 ENDIF
 BPUT#file%,""
 CLOSE#file%
 PROCcall_awkscan("<AwkScan$ParamFile>")
ENDIF
ENDPROC
:
:
:
:
DEF PROCwrite_escaped_string_to_file(file%,string$)
:
LOCAL loop%,char%,wildcards%
:
wildcards%=FNread_opt_config("Simple wildcards")
:
FOR loop%=1 TO LEN(string$)
 char%=ASC(MID$(string$,loop%,1))
 IF wildcards% THEN
  CASE TRUE OF
   WHEN char%=ASC("*") : BPUT#file%,ASC(".") : BPUT#file%,ASC("*")
   WHEN char%=ASC("#") : BPUT#file%,ASC(".")
   WHEN char%=ASC("&") : BPUT#file%,ASC("&")
   WHEN INSTR("\^$.[]|()+?",CHR$(char%))>0 : BPUT#file%,ASC("\") : BPUT#file%,char%
   OTHERWISE : BPUT#file%,char%
  ENDCASE
 ELSE
  BPUT#file%,char%
 ENDIF
NEXT loop%
ENDPROC
:
:
:
:
DEF PROCwrite_string_to_file(file%,string$)
:
LOCAL loop%,char%
:
FOR loop%=1 TO LEN(string$)
 BPUT#file%,ASC(MID$(string$,loop%,1))
NEXT loop%
ENDPROC
:
:
:
:
DEF PROCcall_awkscan(file$)
:
LOCAL command_string$,twindow_string$,options$
:
command_string$="awkscan "+file$
twindow_string$="-wimpslot "+STR$(FNread_int_config("Task slot size"))+"k -name """+FNmessage_trans("TaskWin")+""" -display -quit"
:
SYS "Wimp_StartTask","TaskWindow """+command_string$+""" "+twindow_string$
ENDPROC
:
:
:
:
REMDEF PROCadd_option_switch(RETURN string$,switch$,state%)
REMIF state% THEN string$+=" "+switch$
REMENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
REM Choices handling
:
:
:
:
DEF PROCopen_options_window(x%,y%,open%)
PROCset_icon_state(options_window%,6,FNread_opt_config("Simple wildcards"),FALSE,FALSE)
PROCset_icon_state(options_window%,7,FNread_opt_config("Select opens blank"),FALSE,FALSE)
$FNicon_indirection(options_window%,4)=STR$(FNread_int_config("Task slot size"))
:
IF open% THEN
 PROCopen_window_centred(options_window%,x%,y%)
 PROCput_caret_at_end(options_window%,4)
ELSE
 PROCforce_icon_redraw(options_window%,4)
 IF FNis_caret_in_icon(options_window%,4) THEN PROCput_caret_at_end(options_window%,4)
ENDIF

ENDPROC
:
:
:
:
DEF PROCset_options
PROCset_opt_config("Simple wildcards",FNicon_selected(options_window%,6))
PROCset_opt_config("Select opens blank",FNicon_selected(options_window%,7))
PROCset_int_config("Task slot size", VAL($FNicon_indirection(options_window%,4)))
ENDPROC
:
:
:
:
DEF PROCsave_options
IF choices_save$="" THEN
 SYS "XOS_ReadVarVal","Choices$Write",0,-1,0,0 TO ,,new_choices%
 IF new_choices%<>0 THEN
  SYS "XOS_ReadVarVal","Choices$Write",q%,256,0,0 TO ,,len%
  q%?len%=13
  choices_save$=$q%+".AwkScan"
  SYS "OS_File",17,choices_save$ TO object%
  IF object%=0 THEN SYS "OS_File",8,choices_save$
  choices_save$+=".Choices"
 ELSE
  choices_save$="<AwkScan$Dir>.Choices"
 ENDIF
ENDIF
:
PROCsave_config_file(choices_save$)
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
REM Interactive help
:
:
:
:
DEF PROCsend_interactive_help
:
LOCAL token$,len%
:
REM Try and find an appropriate token for the window and icon currently under the pointer.
:
token$=""
:
CASE b%!32 OF
 WHEN -2 : IF FNread_opt_config("Select opens blank") token$="HelpH1B" ELSE token$="HelpH1A"
 WHEN program_info_window% : token$="HelpH2"
 WHEN search_window% : CASE b%!36 OF
   WHEN 0,1,2,3,4 : token$="HelpSW"+STR$(b%!36)
   WHEN 5         : token$="HelpSW2"
   WHEN 6         : token$="HelpSW"+STR$(b%!36-1)
  ENDCASE
 WHEN options_window% : CASE b%!36 OF
   WHEN 0,1,2 : token$="HelpCH"+STR$(b%!36)
   WHEN 4     : token$="HelpCH"+STR$(b%!36-1)
   WHEN 6,7   : token$="HelpCH"+STR$(b%!36-2)
  ENDCASE
 OTHERWISE
  SYS "Wimp_GetMenuState",1,q%,b%!32,b%!36
  CASE menu_up% OF
   WHEN icon_bar_menu% : IF !q%>-1 THEN token$="MenuIB"+STR$(!q%)
                         IF !q%=1 AND q%!4>-1 THEN token$="MenuDB"+STR$(q%!4)
   WHEN logic_menu%    : IF !q%>-1 THEN token$="MenuLG"+STR$(!q%)
  ENDCASE
ENDCASE
:
REM If a token was found, look it up and reply to the help request.
:
IF token$<>"" THEN
 SYS "MessageTrans_Lookup",message_block%,token$,b%+20,235 TO ,,,len%
 :
 b%!12=b%!8
 b%!16=&503
 !b%=24+(len% AND &FFFFFC)
 SYS "Wimp_SendMessage",17,b%,b%!4
ENDIF
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
REM Initialisation
:
:
:
:
DEF PROCinitialise
DIM a% 256, b% 4095, q% 256
:
resource_path$=FNterritory_resources("<AwkScan$Dir>.Resources")
:
DIM message_block% 16
SYS "MessageTrans_FileInfo",,resource_path$+"Messages" TO flags%,,message_size%
DIM message_buffer% message_size%
SYS "MessageTrans_OpenFile",message_block%,resource_path$+"Messages",message_buffer%
:
task_name$=FNmessage_trans("TaskName")
task_spr$=FNmessage_trans("TaskSpr")
:
$b%="TASK"
q%!0=3
q%!4=&502
q%!8=0
:
SYS "Wimp_Initialise",310,!b%,task_name$,q%
:
quit%=FALSE
:
indirected_data_size%=1024
DIM indirected_data% indirected_data_size%
:
PROCopen_templates(resource_path$+"Templates")
PROCload_template("Info",b%,indirected_data%,indirected_data_size%,-1)
SYS "Wimp_CreateWindow",,b% TO program_info_window%
PROCload_template("Search",b%,indirected_data%,indirected_data_size%,-1)
SYS "Wimp_CreateWindow",,b% TO search_window%
PROCload_template("Options",b%,indirected_data%,indirected_data_size%,-1)
SYS "Wimp_CreateWindow",,b% TO options_window%
PROCclose_templates
:
$FNicon_indirection(program_info_window%,8)=CHR$(169) + " Stephen Fryatt, 2002-" + MID$(build_date$, 8)
$FNicon_indirection(program_info_window%,3)=build_version$+" ("+build_date$+")"
:
!q%=program_info_window%
PROCload_menu_block(resource_path$+"Menus",q%)
icon_bar_menu%=!q%
logic_menu%=q%!8
:
PROCinitialise_config(10,task_name$)
PROCinit_int_config("Task slot size",640)
PROCinit_opt_config("Select opens blank",FALSE)
PROCinit_opt_config("Simple wildcards",TRUE)
:
choices_load$="Choices:AwkScan.Choices"
SYS "XOS_File",17,choices_load$ TO choices_type% ;flags%
IF (flags% AND 1)<>0 OR choices_type%<>1 THEN choices_load$="AwkScan:Choices"
choices_save$=FNload_config_file(choices_load$)
:
DIM last_search$(1)
search_logic%=0
:
icon_bar%=FNcreate_standard_bar_icon(-1,task_spr$)
ENDPROC
:
:
:
:
REM --------------------------------------------------------------------------------------------------------------------
REM
:
:
:
:
DEF FNmessage_trans(m$)
LOCAL e$
IF m$<>"" THEN SYS "MessageTrans_Lookup",message_block%,m$ TO ,,e$
=e$
